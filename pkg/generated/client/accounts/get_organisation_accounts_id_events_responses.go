// Code generated by go-swagger; DO NOT EDIT.

package accounts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/form3tech-oss/go-form3/pkg/generated/models"
)

// GetOrganisationAccountsIDEventsReader is a Reader for the GetOrganisationAccountsIDEvents structure.
type GetOrganisationAccountsIDEventsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOrganisationAccountsIDEventsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetOrganisationAccountsIDEventsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetOrganisationAccountsIDEventsOK creates a GetOrganisationAccountsIDEventsOK with default headers values
func NewGetOrganisationAccountsIDEventsOK() *GetOrganisationAccountsIDEventsOK {
	return &GetOrganisationAccountsIDEventsOK{}
}

/*GetOrganisationAccountsIDEventsOK handles this case with default header values.

Account event list
*/
type GetOrganisationAccountsIDEventsOK struct {

	//Payload

	// isStream: false
	*models.AccountEventListResponse
}

func (o *GetOrganisationAccountsIDEventsOK) Error() string {
	return fmt.Sprintf("[GET /organisation/accounts/{id}/events][%d] getOrganisationAccountsIdEventsOK  %+v", 200, o)
}

func (o *GetOrganisationAccountsIDEventsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.AccountEventListResponse = new(models.AccountEventListResponse)

	// response payload

	if err := consumer.Consume(response.Body(), o.AccountEventListResponse); err != nil && err != io.EOF {
		return err
	}

	return nil
}
